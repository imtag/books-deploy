import{_ as n,c as s,o as e,d as a}from"./app.c4f45da1.js";const g=JSON.parse('{"title":"\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6761\u4EF6\u7C7B\u578B\u4E0Einfer","slug":"\u6761\u4EF6\u7C7B\u578B\u4E0Einfer","link":"#\u6761\u4EF6\u7C7B\u578B\u4E0Einfer","children":[]},{"level":2,"title":"infer\u7684\u5E94\u7528","slug":"infer\u7684\u5E94\u7528","link":"#infer\u7684\u5E94\u7528","children":[]},{"level":2,"title":"\u5C0F\u7ED3","slug":"\u5C0F\u7ED3","link":"#\u5C0F\u7ED3","children":[]}],"relativePath":"TypeScript/\u6DF1\u5165\u6D45\u51FATypeScript\uFF1A\u4ECE\u57FA\u7840\u77E5\u8BC6\u5230\u7C7B\u578B\u7F16\u7A0B/\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57.md"}'),p={name:"TypeScript/\u6DF1\u5165\u6D45\u51FATypeScript\uFF1A\u4ECE\u57FA\u7840\u77E5\u8BC6\u5230\u7C7B\u578B\u7F16\u7A0B/\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57.md"},l=a(`<h1 id="\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57" tabindex="-1">\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57 <a class="header-anchor" href="#\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57" aria-hidden="true">#</a></h1><hr><h1 id="\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57-1" tabindex="-1">\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57 <a class="header-anchor" href="#\u9AD8\u7EA7\u7C7B\u578B\u4E4B\u5F3A\u5927\u7684infer\u5173\u952E\u5B57-1" aria-hidden="true">#</a></h1><p><code>infer</code> \u662F\u5DE5\u5177\u7C7B\u578B\u548C\u5E95\u5C42\u5E93\u4E2D\u975E\u5E38\u5E38\u7528\u7684\u5173\u952E\u5B57,\u8868\u793A\u5728 extends \u6761\u4EF6\u8BED\u53E5\u4E2D\u5F85\u63A8\u65AD\u7684\u7C7B\u578B\u53D8\u91CF,\u76F8\u5BF9\u800C\u8A00\u4E5F\u6BD4\u8F83\u96BE\u7406\u89E3,\u6211\u4EEC\u4E0D\u59A8\u4ECE\u4E00\u4E2A typescript \u9762\u8BD5\u9898\u5F00\u59CB:</p><p>\u6211\u4EEC\u4E4B\u524D\u5B66\u8FC7 <code>ReturnType</code> \u7528\u4E8E\u83B7\u53D6\u51FD\u6570\u7684\u8FD4\u56DE\u7C7B\u578B,\u90A3\u4E48\u4F60\u4F1A\u5982\u4F55\u8BBE\u8BA1\u4E00\u4E2A <code>ReturnType</code>?</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">interface User {</span></span>
<span class="line"><span style="color:#A6ACCD;">    id: number</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: string</span></span>
<span class="line"><span style="color:#A6ACCD;">    form?: string</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">type Foo = () =&gt; User</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">type R1 = ReturnType&lt;Foo&gt; // User</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="\u6761\u4EF6\u7C7B\u578B\u4E0Einfer" tabindex="-1">\u6761\u4EF6\u7C7B\u578B\u4E0Einfer <a class="header-anchor" href="#\u6761\u4EF6\u7C7B\u578B\u4E0Einfer" aria-hidden="true">#</a></h2><p>\u6211\u4EEC\u5148\u770B\u4E00\u4E2A\u7B80\u5355\u4F8B\u5B50:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">type ParamType&lt;T&gt; = T extends (param: infer P) =&gt; any ? P : T;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u4E0A\u9762\u4F8B\u5B50\u8868\u793A,\u5982\u679C <code>T</code> \u80FD\u8D4B\u503C\u7ED9 <code>(param: infer P) =&gt; any</code>\uFF0C\u5219\u7ED3\u679C\u662F<code>(param: infer P) =&gt; any</code>\u7C7B\u578B\u4E2D\u7684\u53C2\u6570 <code>P</code>\uFF0C\u5426\u5219\u8FD4\u56DE\u4E3A <code>T</code>,<code>infer P</code>\u8868\u793A\u5F85\u63A8\u65AD\u7684\u51FD\u6570\u53C2\u6570.</p><p>\u6211\u4EEC\u518D\u56DE\u5230\u5F00\u59CB\u7684\u9762\u8BD5\u9898,\u7531\u4E8E\u63A5\u53D7\u7684\u51FD\u6570\u8FD4\u56DE\u7C7B\u578B\u662F\u672A\u77E5\u7684,\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u7528<code>infer P</code>\u4EE3\u8868\u51FD\u6570\u8FD4\u56DE\u7C7B\u578B,\u5982\u4E0B:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">type ReturnType&lt;T&gt; = T extends (...args: any[]) =&gt; infer P ? P : any;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u5176\u5B9ETypeScript\u4E5F\u5185\u7F6E\u4E86\u4E00\u4E2A\u83B7\u53D6\u6784\u9020\u51FD\u6570\u53C2\u6570\u7684\u5DE5\u5177\u7C7B\u578B:</p><ul><li><code>ConstructorParameters&lt;T&gt;</code> -- \u63D0\u53D6\u6784\u9020\u51FD\u6570\u4E2D\u53C2\u6570\u7C7B\u578B</li></ul><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">class TestClass {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor(public name: string, public age: number) {}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">type R2 = ConstructorParameters&lt;typeof TestClass&gt; // [string, number]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u6211\u4EEC\u518D\u8BD5\u7740\u628A\u5B83\u5B9E\u73B0\u4E00\u4E0B:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">type ConstructorParameters&lt;T extends new (...args: any[]) =&gt; any&gt; = T extends new (...args: infer P) =&gt; any</span></span>
<span class="line"><span style="color:#A6ACCD;">  ? P</span></span>
<span class="line"><span style="color:#A6ACCD;">  : never;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u6211\u4EEC\u4E00\u6B65\u6B65\u5206\u6790\u4E00\u4E0B\u8FD9\u4E2A\u5DE5\u5177\u7C7B\u578B:</p><ol><li><code>new (...args: any[]</code>\u6307\u6784\u9020\u51FD\u6570,\u56E0\u4E3A\u6784\u9020\u51FD\u6570\u662F\u53EF\u4EE5\u88AB\u5B9E\u4F8B\u5316\u7684.</li><li><code>infer P</code>\u4EE3\u8868\u5F85\u63A8\u65AD\u7684\u6784\u9020\u51FD\u6570\u53C2\u6570,\u5982\u679C\u63A5\u53D7\u7684\u7C7B\u578B<code>T</code>\u662F\u4E00\u4E2A\u6784\u9020\u51FD\u6570,\u90A3\u4E48\u8FD4\u56DE\u6784\u9020\u51FD\u6570\u7684\u53C2\u6570\u7C7B\u578B<code>P</code>,\u5426\u5219\u4EC0\u4E48\u4E5F\u4E0D\u8FD4\u56DE,\u5373<code>never</code>\u7C7B\u578B</li></ol><h2 id="infer\u7684\u5E94\u7528" tabindex="-1">infer\u7684\u5E94\u7528 <a class="header-anchor" href="#infer\u7684\u5E94\u7528" aria-hidden="true">#</a></h2><p><code>infer</code>\u975E\u5E38\u5F3A\u5927,\u7531\u4E8E\u5B83\u7684\u5B58\u5728\u6211\u4EEC\u53EF\u4EE5\u505A\u51FA\u975E\u5E38\u591A\u7684\u9A9A\u64CD\u4F5C.</p><ol><li><pre><code>tuple\u8F6Cunion,\u6BD4\u5982\`[string, number] -&gt; string | number\`:
</code></pre></li></ol><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">type ElementOf&lt;T&gt; = T extends Array&lt;infer E&gt; ? E : never;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">type TTuple = [string, number];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">type ToUnion = ElementOf&lt;ATuple&gt;; // string | number</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="2"><li><pre><code>union \u8F6C intersection\uFF0C\u5982\uFF1A\`string | number -&gt; string &amp; number\`
</code></pre></li></ol><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">type UnionToIntersection&lt;U&gt; = (U extends any ? (k: U) =&gt; void : never) extends ((k: infer I) =&gt; void) ? I : never;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">type Result = UnionToIntersection&lt;string | number&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>union \u8F6C intersection \u7684\u64CD\u4F5C\u591A\u7528\u4E8E mixin \u4E2D.</p><h2 id="\u5C0F\u7ED3" tabindex="-1">\u5C0F\u7ED3 <a class="header-anchor" href="#\u5C0F\u7ED3" aria-hidden="true">#</a></h2><p>\u672C\u8282\u6211\u4EEC\u63A5\u89E6\u4E86 infer \u5173\u952E\u5B57,\u7B80\u5355\u800C\u8A00 infer \u5173\u952E\u5B57\u5C31\u662F\u58F0\u660E\u4E00\u4E2A\u7C7B\u578B\u53D8\u91CF,\u5F53\u7C7B\u578B\u7CFB\u7EDF\u7ED9\u8DB3\u6761\u4EF6\u7684\u65F6\u5019\u7C7B\u578B\u5C31\u4F1A\u88AB\u63A8\u65AD\u51FA\u6765.</p><p>\u81F3\u6B64,\u6211\u4EEC\u57FA\u672C\u4E0A\u6211\u4EEC\u63A5\u89E6\u5B8C\u4E86\u4E3B\u8981\u7684\u7C7B\u578B\u7F16\u7A0B\u5185\u5BB9,\u63A5\u4E0B\u6765\u6211\u4EEC\u53EF\u4EE5\u653E\u5F00\u8EAB\u624B\u5229\u7528\u7C7B\u578B\u7F16\u7A0B\u8BBE\u8BA1\u4E00\u4E9B\u975E\u5E38\u5B9E\u7528\u7684\u7C7B\u578B\u5DE5\u5177.</p>`,29),t=[l];function r(o,c,i,d,y,C){return e(),s("div",null,t)}const u=n(p,[["render",r]]);export{g as __pageData,u as default};

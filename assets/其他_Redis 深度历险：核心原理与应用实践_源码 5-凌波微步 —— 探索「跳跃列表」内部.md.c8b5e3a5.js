import{_ as s,c as n,o as a,d as e}from"./app.c4f45da1.js";const y=JSON.parse('{"title":"\u6E90\u7801 5-\u51CC\u6CE2\u5FAE\u6B65 \u2014\u2014 \u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u57FA\u672C\u7ED3\u6784","slug":"\u57FA\u672C\u7ED3\u6784","link":"#\u57FA\u672C\u7ED3\u6784","children":[]},{"level":2,"title":"\u67E5\u627E\u8FC7\u7A0B","slug":"\u67E5\u627E\u8FC7\u7A0B","link":"#\u67E5\u627E\u8FC7\u7A0B","children":[]},{"level":2,"title":"\u968F\u673A\u5C42\u6570","slug":"\u968F\u673A\u5C42\u6570","link":"#\u968F\u673A\u5C42\u6570","children":[]},{"level":2,"title":"\u63D2\u5165\u8FC7\u7A0B","slug":"\u63D2\u5165\u8FC7\u7A0B","link":"#\u63D2\u5165\u8FC7\u7A0B","children":[]},{"level":2,"title":"\u5220\u9664\u8FC7\u7A0B","slug":"\u5220\u9664\u8FC7\u7A0B","link":"#\u5220\u9664\u8FC7\u7A0B","children":[]},{"level":2,"title":"\u66F4\u65B0\u8FC7\u7A0B","slug":"\u66F4\u65B0\u8FC7\u7A0B","link":"#\u66F4\u65B0\u8FC7\u7A0B","children":[]},{"level":2,"title":"\u5982\u679C score \u503C\u90FD\u4E00\u6837\u5462\uFF1F","slug":"\u5982\u679C-score-\u503C\u90FD\u4E00\u6837\u5462\uFF1F","link":"#\u5982\u679C-score-\u503C\u90FD\u4E00\u6837\u5462\uFF1F","children":[]},{"level":2,"title":"\u5143\u7D20\u6392\u540D\u662F\u600E\u4E48\u7B97\u51FA\u6765\u7684\uFF1F","slug":"\u5143\u7D20\u6392\u540D\u662F\u600E\u4E48\u7B97\u51FA\u6765\u7684\uFF1F","link":"#\u5143\u7D20\u6392\u540D\u662F\u600E\u4E48\u7B97\u51FA\u6765\u7684\uFF1F","children":[]},{"level":2,"title":"\u601D\u8003","slug":"\u601D\u8003","link":"#\u601D\u8003","children":[]},{"level":2,"title":"\u540E\u8BB0","slug":"\u540E\u8BB0","link":"#\u540E\u8BB0","children":[]}],"relativePath":"\u5176\u4ED6/Redis \u6DF1\u5EA6\u5386\u9669\uFF1A\u6838\u5FC3\u539F\u7406\u4E0E\u5E94\u7528\u5B9E\u8DF5/\u6E90\u7801 5-\u51CC\u6CE2\u5FAE\u6B65 \u2014\u2014 \u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8.md"}'),l={name:"\u5176\u4ED6/Redis \u6DF1\u5EA6\u5386\u9669\uFF1A\u6838\u5FC3\u539F\u7406\u4E0E\u5E94\u7528\u5B9E\u8DF5/\u6E90\u7801 5-\u51CC\u6CE2\u5FAE\u6B65 \u2014\u2014 \u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8.md"},p=e(`<h1 id="\u6E90\u7801-5-\u51CC\u6CE2\u5FAE\u6B65-\u2014\u2014-\u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8" tabindex="-1">\u6E90\u7801 5-\u51CC\u6CE2\u5FAE\u6B65 \u2014\u2014 \u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8 <a class="header-anchor" href="#\u6E90\u7801-5-\u51CC\u6CE2\u5FAE\u6B65-\u2014\u2014-\u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8" aria-hidden="true">#</a></h1><hr><h1 id="\u6E90\u7801-5\uFF1A\u51CC\u6CE2\u5FAE\u6B65-\u2014\u2014-\u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8\u7ED3\u6784" tabindex="-1">\u6E90\u7801 5\uFF1A\u51CC\u6CE2\u5FAE\u6B65 \u2014\u2014 \u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8\u7ED3\u6784 <a class="header-anchor" href="#\u6E90\u7801-5\uFF1A\u51CC\u6CE2\u5FAE\u6B65-\u2014\u2014-\u63A2\u7D22\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u5185\u90E8\u7ED3\u6784" aria-hidden="true">#</a></h1><p>Redis \u7684 zset \u662F\u4E00\u4E2A\u590D\u5408\u7ED3\u6784\uFF0C\u4E00\u65B9\u9762\u5B83\u9700\u8981\u4E00\u4E2A hash \u7ED3\u6784\u6765\u5B58\u50A8 value \u548C score \u7684\u5BF9\u5E94\u5173\u7CFB\uFF0C\u53E6\u4E00\u65B9\u9762\u9700\u8981\u63D0\u4F9B\u6309\u7167 score \u6765\u6392\u5E8F\u7684\u529F\u80FD\uFF0C\u8FD8\u9700\u8981\u80FD\u591F\u6307\u5B9A score \u7684\u8303\u56F4\u6765\u83B7\u53D6 value \u5217\u8868\u7684\u529F\u80FD\uFF0C\u8FD9\u5C31\u9700\u8981\u53E6\u5916\u4E00\u4E2A\u7ED3\u6784\u300C\u8DF3\u8DC3\u5217\u8868\u300D\u3002</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/27/164d9cd9064b556e~tplv-t2oaga2asx-image.image" alt=""></p><p>zset \u7684\u5185\u90E8\u5B9E\u73B0\u662F\u4E00\u4E2A hash \u5B57\u5178\u52A0\u4E00\u4E2A\u8DF3\u8DC3\u5217\u8868 (skiplist)\u3002hash \u7ED3\u6784\u5728\u8BB2\u5B57\u5178\u7ED3\u6784\u65F6\u5DF2\u7ECF\u8BE6\u7EC6\u5206\u6790\u8FC7\u4E86\uFF0C\u5B83\u5F88\u7C7B\u4F3C\u4E8E Java \u8BED\u8A00\u4E2D\u7684 HashMap \u7ED3\u6784\u3002\u672C\u8282\u6211\u4EEC\u6765\u8BB2\u8DF3\u8DC3\u5217\u8868\uFF0C\u5B83\u6BD4\u8F83\u590D\u6742\uFF0C\u8BFB\u8005\u8981\u6709\u5FC3\u7406\u51C6\u5907\u3002</p><h2 id="\u57FA\u672C\u7ED3\u6784" tabindex="-1">\u57FA\u672C\u7ED3\u6784 <a class="header-anchor" href="#\u57FA\u672C\u7ED3\u6784" aria-hidden="true">#</a></h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/27/164d9f96ed4e1a0d~tplv-t2oaga2asx-image.image" alt=""></p><p>\u4E0A\u56FE\u5C31\u662F\u8DF3\u8DC3\u5217\u8868\u7684\u793A\u610F\u56FE\uFF0C\u56FE\u4E2D\u53EA\u753B\u4E86\u56DB\u5C42\uFF0CRedis \u7684\u8DF3\u8DC3\u8868\u5171\u6709 64 \u5C42\uFF0C\u5BB9\u7EB3 2^64 \u4E2A\u5143\u7D20\u5E94\u8BE5\u4E0D\u6210\u95EE\u9898\u3002\u6BCF\u4E00\u4E2A kv \u5757\u5BF9\u5E94\u7684\u7ED3\u6784\u5982\u4E0B\u9762\u7684\u4EE3\u7801\u4E2D\u7684<code>zslnode</code>\u7ED3\u6784\uFF0Ckv header \u4E5F\u662F\u8FD9\u4E2A\u7ED3\u6784\uFF0C\u53EA\u4E0D\u8FC7 value \u5B57\u6BB5\u662F null \u503C\u2014\u2014\u65E0\u6548\u7684\uFF0Cscore \u662F Double.MIN_VALUE\uFF0C\u7528\u6765\u57AB\u5E95\u7684\u3002kv \u4E4B\u95F4\u4F7F\u7528\u6307\u9488\u4E32\u8D77\u6765\u5F62\u6210\u4E86\u53CC\u5411\u94FE\u8868\u7ED3\u6784\uFF0C\u5B83\u4EEC\u662F <strong>\u6709\u5E8F</strong> \u6392\u5217\u7684\uFF0C\u4ECE\u5C0F\u5230\u5927\u3002\u4E0D\u540C\u7684 kv \u5C42\u9AD8\u53EF\u80FD\u4E0D\u4E00\u6837\uFF0C\u5C42\u6570\u8D8A\u9AD8\u7684 kv \u8D8A\u5C11\u3002\u540C\u4E00\u5C42\u7684 kv \u4F1A\u4F7F\u7528\u6307\u9488\u4E32\u8D77\u6765\u3002\u6BCF\u4E00\u4E2A\u5C42\u5143\u7D20\u7684\u904D\u5386\u90FD\u662F\u4ECE kv header \u51FA\u53D1\u3002</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">struct zslnode {</span></span>
<span class="line"><span style="color:#A6ACCD;">  string value;</span></span>
<span class="line"><span style="color:#A6ACCD;">  double score;</span></span>
<span class="line"><span style="color:#A6ACCD;">  zslnode*[] forwards;  // \u591A\u5C42\u8FDE\u63A5\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">  zslnode* backward;  // \u56DE\u6EAF\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct zsl {</span></span>
<span class="line"><span style="color:#A6ACCD;">  zslnode* header; // \u8DF3\u8DC3\u5217\u8868\u5934\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">  int maxLevel; // \u8DF3\u8DC3\u5217\u8868\u5F53\u524D\u7684\u6700\u9AD8\u5C42</span></span>
<span class="line"><span style="color:#A6ACCD;">  map&lt;string, zslnode*&gt; ht; // hash \u7ED3\u6784\u7684\u6240\u6709\u952E\u503C\u5BF9</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="\u67E5\u627E\u8FC7\u7A0B" tabindex="-1">\u67E5\u627E\u8FC7\u7A0B <a class="header-anchor" href="#\u67E5\u627E\u8FC7\u7A0B" aria-hidden="true">#</a></h2><p>\u8BBE\u60F3\u5982\u679C\u8DF3\u8DC3\u5217\u8868\u53EA\u6709\u4E00\u5C42\u4F1A\u600E\u6837\uFF1F\u63D2\u5165\u5220\u9664\u64CD\u4F5C\u9700\u8981\u5B9A\u4F4D\u5230\u76F8\u5E94\u7684\u4F4D\u7F6E\u8282\u70B9 (\u5B9A\u4F4D\u5230\u6700\u540E\u4E00\u4E2A\u6BD4\u300C\u6211\u300D\u5C0F\u7684\u5143\u7D20\uFF0C\u4E5F\u5C31\u662F\u7B2C\u4E00\u4E2A\u6BD4\u300C\u6211\u300D\u5927\u7684\u5143\u7D20\u7684\u524D\u4E00\u4E2A)\uFF0C\u5B9A\u4F4D\u7684\u6548\u7387\u80AF\u5B9A\u6BD4\u8F83\u5DEE\uFF0C\u590D\u6742\u5EA6\u5C06\u4F1A\u662F O(n)\uFF0C\u56E0\u4E3A\u9700\u8981\u6328\u4E2A\u904D\u5386\u3002\u4E5F\u8BB8\u4F60\u4F1A\u60F3\u5230\u4E8C\u5206\u67E5\u627E\uFF0C\u4F46\u662F\u4E8C\u5206\u67E5\u627E\u7684\u7ED3\u6784\u53EA\u80FD\u662F\u6709\u5E8F\u6570\u7EC4\u3002\u8DF3\u8DC3\u5217\u8868\u6709\u4E86\u591A\u5C42\u7ED3\u6784\u4E4B\u540E\uFF0C\u8FD9\u4E2A\u5B9A\u4F4D\u7684\u7B97\u6CD5\u590D\u6742\u5EA6\u5C06\u4F1A\u964D\u5230 O(lg(n))\u3002</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/27/164dc52ae7e6444c~tplv-t2oaga2asx-image.image" alt=""></p><p>\u5982\u56FE\u6240\u793A\uFF0C\u6211\u4EEC\u8981\u5B9A\u4F4D\u5230\u90A3\u4E2A\u7D2B\u8272\u7684 kv\uFF0C\u9700\u8981\u4ECE header \u7684\u6700\u9AD8\u5C42\u5F00\u59CB\u904D\u5386\u627E\u5230\u7B2C\u4E00\u4E2A\u8282\u70B9 (\u6700\u540E\u4E00\u4E2A\u6BD4\u300C\u6211\u300D\u5C0F\u7684\u5143\u7D20)\uFF0C\u7136\u540E\u4ECE\u8FD9\u4E2A\u8282\u70B9\u5F00\u59CB\u964D\u4E00\u5C42\u518D\u904D\u5386\u627E\u5230\u7B2C\u4E8C\u4E2A\u8282\u70B9 (\u6700\u540E\u4E00\u4E2A\u6BD4\u300C\u6211\u300D\u5C0F\u7684\u5143\u7D20)\uFF0C\u7136\u540E\u4E00\u76F4\u964D\u5230\u6700\u5E95\u5C42\u8FDB\u884C\u904D\u5386\u5C31\u627E\u5230\u4E86\u671F\u671B\u7684\u8282\u70B9 (\u6700\u5E95\u5C42\u7684\u6700\u540E\u4E00\u4E2A\u6BD4\u6211\u300C\u5C0F\u300D\u7684\u5143\u7D20)\u3002</p><p>\u6211\u4EEC\u5C06\u4E2D\u95F4\u7ECF\u8FC7\u7684\u4E00\u7CFB\u5217\u8282\u70B9\u79F0\u4E4B\u4E3A\u300C\u641C\u7D22\u8DEF\u5F84\u300D\uFF0C\u5B83\u662F\u4ECE\u6700\u9AD8\u5C42\u4E00\u76F4\u5230\u6700\u5E95\u5C42\u7684\u6BCF\u4E00\u5C42\u6700\u540E\u4E00\u4E2A\u6BD4\u300C\u6211\u300D\u5C0F\u7684\u5143\u7D20\u8282\u70B9\u5217\u8868\u3002</p><p>\u6709\u4E86\u8FD9\u4E2A\u641C\u7D22\u8DEF\u5F84\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u63D2\u5165\u8FD9\u4E2A\u65B0\u8282\u70B9\u4E86\u3002\u4E0D\u8FC7\u8FD9\u4E2A\u63D2\u5165\u8FC7\u7A0B\u4E5F\u4E0D\u662F\u7279\u522B\u7B80\u5355\u3002\u56E0\u4E3A\u65B0\u63D2\u5165\u7684\u8282\u70B9\u5230\u5E95\u6709\u591A\u5C11\u5C42\uFF0C\u5F97\u6709\u4E2A\u7B97\u6CD5\u6765\u5206\u914D\u4E00\u4E0B\uFF0C\u8DF3\u8DC3\u5217\u8868\u4F7F\u7528\u7684\u662F\u968F\u673A\u7B97\u6CD5\u3002</p><h2 id="\u968F\u673A\u5C42\u6570" tabindex="-1">\u968F\u673A\u5C42\u6570 <a class="header-anchor" href="#\u968F\u673A\u5C42\u6570" aria-hidden="true">#</a></h2><p>\u5BF9\u4E8E\u6BCF\u4E00\u4E2A\u65B0\u63D2\u5165\u7684\u8282\u70B9\uFF0C\u90FD\u9700\u8981\u8C03\u7528\u4E00\u4E2A\u968F\u673A\u7B97\u6CD5\u7ED9\u5B83\u5206\u914D\u4E00\u4E2A\u5408\u7406\u7684\u5C42\u6570\u3002\u76F4\u89C2\u4E0A\u671F\u671B\u7684\u76EE\u6807\u662F 50% \u7684 Level1\uFF0C25% \u7684 Level2\uFF0C12.5% \u7684 Level3\uFF0C\u4E00\u76F4\u5230\u6700\u9876\u5C42<code>2^-63</code>\uFF0C\u56E0\u4E3A\u8FD9\u91CC\u6BCF\u4E00\u5C42\u7684\u664B\u5347\u6982\u7387\u662F 50%\u3002</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">/* Returns a random level for the new skiplist node we are going to create.</span></span>
<span class="line"><span style="color:#A6ACCD;"> * The return value of this function is between 1 and ZSKIPLIST_MAXLEVEL</span></span>
<span class="line"><span style="color:#A6ACCD;"> * (both inclusive), with a powerlaw-alike distribution where higher</span></span>
<span class="line"><span style="color:#A6ACCD;"> * levels are less likely to be returned. */</span></span>
<span class="line"><span style="color:#A6ACCD;">int zslRandomLevel(void) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    int level = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    while ((random()&amp;0xFFFF) &lt; (ZSKIPLIST_P * 0xFFFF))</span></span>
<span class="line"><span style="color:#A6ACCD;">        level += 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    return (level&lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u4E0D\u8FC7 Redis \u6807\u51C6\u6E90\u7801\u4E2D\u7684\u664B\u5347\u6982\u7387\u53EA\u6709 25%\uFF0C\u4E5F\u5C31\u662F\u4EE3\u7801\u4E2D\u7684 ZSKIPLIST_P \u7684\u503C\u3002\u6240\u4EE5\u5B98\u65B9\u7684\u8DF3\u8DC3\u5217\u8868\u66F4\u52A0\u7684\u6241\u5E73\u5316\uFF0C\u5C42\u9AD8\u76F8\u5BF9\u8F83\u4F4E\uFF0C\u5728\u5355\u4E2A\u5C42\u4E0A\u9700\u8981\u904D\u5386\u7684\u8282\u70B9\u6570\u91CF\u4F1A\u7A0D\u591A\u4E00\u70B9\u3002</p><p>\u4E5F\u6B63\u662F\u56E0\u4E3A\u5C42\u6570\u4E00\u822C\u4E0D\u9AD8\uFF0C\u6240\u4EE5\u904D\u5386\u7684\u65F6\u5019\u4ECE\u9876\u5C42\u5F00\u59CB\u5F80\u4E0B\u904D\u5386\u4F1A\u975E\u5E38\u6D6A\u8D39\u3002\u8DF3\u8DC3\u5217\u8868\u4F1A\u8BB0\u5F55\u4E00\u4E0B\u5F53\u524D\u7684\u6700\u9AD8\u5C42\u6570<code>maxLevel</code>\uFF0C\u904D\u5386\u65F6\u4ECE\u8FD9\u4E2A maxLevel \u5F00\u59CB\u904D\u5386\u6027\u80FD\u5C31\u4F1A\u63D0\u9AD8\u5F88\u591A\u3002</p><h2 id="\u63D2\u5165\u8FC7\u7A0B" tabindex="-1">\u63D2\u5165\u8FC7\u7A0B <a class="header-anchor" href="#\u63D2\u5165\u8FC7\u7A0B" aria-hidden="true">#</a></h2><p>\u4E0B\u9762\u662F\u63D2\u5165\u8FC7\u7A0B\u7684\u6E90\u7801\uFF0C\u5B83\u7A0D\u5FAE\u6709\u70B9\u957F\uFF0C\u4E0D\u8FC7\u6574\u4F53\u7684\u8FC7\u7A0B\u8FD8\u662F\u6BD4\u8F83\u6E05\u6670\u7684\u3002</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">/* Insert a new node in the skiplist. Assumes the element does not already</span></span>
<span class="line"><span style="color:#A6ACCD;"> * exist (up to the caller to enforce that). The skiplist takes ownership</span></span>
<span class="line"><span style="color:#A6ACCD;"> * of the passed SDS string &#39;ele&#39;. */</span></span>
<span class="line"><span style="color:#A6ACCD;">zskiplistNode *zslInsert(zskiplist *zsl, double score, sds ele) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u5B58\u50A8\u641C\u7D22\u8DEF\u5F84</span></span>
<span class="line"><span style="color:#A6ACCD;">    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u5B58\u50A8\u7ECF\u8FC7\u7684\u8282\u70B9\u8DE8\u5EA6</span></span>
<span class="line"><span style="color:#A6ACCD;">    unsigned int rank[ZSKIPLIST_MAXLEVEL];</span></span>
<span class="line"><span style="color:#A6ACCD;">    int i, level;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    serverAssert(!isnan(score));</span></span>
<span class="line"><span style="color:#A6ACCD;">    x = zsl-&gt;header;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u9010\u6B65\u964D\u7EA7\u5BFB\u627E\u76EE\u6807\u8282\u70B9\uFF0C\u5F97\u5230\u300C\u641C\u7D22\u8DEF\u5F84\u300D</span></span>
<span class="line"><span style="color:#A6ACCD;">    for (i = zsl-&gt;level-1; i &gt;= 0; i--) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        /* store rank that is crossed to reach the insert position */</span></span>
<span class="line"><span style="color:#A6ACCD;">        rank[i] = i == (zsl-&gt;level-1) ? 0 : rank[i+1];</span></span>
<span class="line"><span style="color:#A6ACCD;">        // \u5982\u679Cscore\u76F8\u7B49\uFF0C\u8FD8\u9700\u8981\u6BD4\u8F83value</span></span>
<span class="line"><span style="color:#A6ACCD;">        while (x-&gt;level[i].forward &amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">                (x-&gt;level[i].forward-&gt;score &lt; score ||</span></span>
<span class="line"><span style="color:#A6ACCD;">                    (x-&gt;level[i].forward-&gt;score == score &amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    sdscmp(x-&gt;level[i].forward-&gt;ele,ele) &lt; 0)))</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            rank[i] += x-&gt;level[i].span;</span></span>
<span class="line"><span style="color:#A6ACCD;">            x = x-&gt;level[i].forward;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        update[i] = x;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u6B63\u5F0F\u8FDB\u5165\u63D2\u5165\u8FC7\u7A0B</span></span>
<span class="line"><span style="color:#A6ACCD;">    /* we assume the element is not already inside, since we allow duplicated</span></span>
<span class="line"><span style="color:#A6ACCD;">     * scores, reinserting the same element should never happen since the</span></span>
<span class="line"><span style="color:#A6ACCD;">     * caller of zslInsert() should test in the hash table if the element is</span></span>
<span class="line"><span style="color:#A6ACCD;">     * already inside or not. */</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u968F\u673A\u4E00\u4E2A\u5C42\u6570</span></span>
<span class="line"><span style="color:#A6ACCD;">    level = zslRandomLevel();</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u586B\u5145\u8DE8\u5EA6</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (level &gt; zsl-&gt;level) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        for (i = zsl-&gt;level; i &lt; level; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            rank[i] = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">            update[i] = zsl-&gt;header;</span></span>
<span class="line"><span style="color:#A6ACCD;">            update[i]-&gt;level[i].span = zsl-&gt;length;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        // \u66F4\u65B0\u8DF3\u8DC3\u5217\u8868\u7684\u5C42\u9AD8</span></span>
<span class="line"><span style="color:#A6ACCD;">        zsl-&gt;level = level;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u521B\u5EFA\u65B0\u8282\u70B9</span></span>
<span class="line"><span style="color:#A6ACCD;">    x = zslCreateNode(level,score,ele);</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u91CD\u6392\u4E00\u4E0B\u524D\u5411\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">    for (i = 0; i &lt; level; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        x-&gt;level[i].forward = update[i]-&gt;level[i].forward;</span></span>
<span class="line"><span style="color:#A6ACCD;">        update[i]-&gt;level[i].forward = x;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">        /* update span covered by update[i] as x is inserted here */</span></span>
<span class="line"><span style="color:#A6ACCD;">        x-&gt;level[i].span = update[i]-&gt;level[i].span - (rank[0] - rank[i]);</span></span>
<span class="line"><span style="color:#A6ACCD;">        update[i]-&gt;level[i].span = (rank[0] - rank[i]) + 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    /* increment span for untouched levels */</span></span>
<span class="line"><span style="color:#A6ACCD;">    for (i = level; i &lt; zsl-&gt;level; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        update[i]-&gt;level[i].span++;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    // \u91CD\u6392\u4E00\u4E0B\u540E\u5411\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">    x-&gt;backward = (update[0] == zsl-&gt;header) ? NULL : update[0];</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (x-&gt;level[0].forward)</span></span>
<span class="line"><span style="color:#A6ACCD;">        x-&gt;level[0].forward-&gt;backward = x;</span></span>
<span class="line"><span style="color:#A6ACCD;">    else</span></span>
<span class="line"><span style="color:#A6ACCD;">        zsl-&gt;tail = x;</span></span>
<span class="line"><span style="color:#A6ACCD;">    zsl-&gt;length++;</span></span>
<span class="line"><span style="color:#A6ACCD;">    return x;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u9996\u5148\u6211\u4EEC\u5728\u641C\u7D22\u5408\u9002\u63D2\u5165\u70B9\u7684\u8FC7\u7A0B\u4E2D\u5C06\u300C\u641C\u7D22\u8DEF\u5F84\u300D\u6478\u51FA\u6765\u4E86\uFF0C\u7136\u540E\u5C31\u53EF\u4EE5\u5F00\u59CB\u521B\u5EFA\u65B0\u8282\u70B9\u4E86\uFF0C\u521B\u5EFA\u7684\u65F6\u5019\u9700\u8981\u7ED9\u8FD9\u4E2A\u8282\u70B9\u968F\u673A\u5206\u914D\u4E00\u4E2A\u5C42\u6570\uFF0C\u518D\u5C06\u641C\u7D22\u8DEF\u5F84\u4E0A\u7684\u8282\u70B9\u548C\u8FD9\u4E2A\u65B0\u8282\u70B9\u901A\u8FC7\u524D\u5411\u540E\u5411\u6307\u9488\u4E32\u8D77\u6765\u3002\u5982\u679C\u5206\u914D\u7684\u65B0\u8282\u70B9\u7684\u9AD8\u5EA6\u9AD8\u4E8E\u5F53\u524D\u8DF3\u8DC3\u5217\u8868\u7684\u6700\u5927\u9AD8\u5EA6\uFF0C\u5C31\u9700\u8981\u66F4\u65B0\u4E00\u4E0B\u8DF3\u8DC3\u5217\u8868\u7684\u6700\u5927\u9AD8\u5EA6\u3002</p><h2 id="\u5220\u9664\u8FC7\u7A0B" tabindex="-1">\u5220\u9664\u8FC7\u7A0B <a class="header-anchor" href="#\u5220\u9664\u8FC7\u7A0B" aria-hidden="true">#</a></h2><p>\u5220\u9664\u8FC7\u7A0B\u548C\u63D2\u5165\u8FC7\u7A0B\u7C7B\u4F3C\uFF0C\u90FD\u9700\u5148\u628A\u8FD9\u4E2A\u300C\u641C\u7D22\u8DEF\u5F84\u300D\u627E\u51FA\u6765\u3002\u7136\u540E\u5BF9\u4E8E\u6BCF\u4E2A\u5C42\u7684\u76F8\u5173\u8282\u70B9\u90FD\u91CD\u6392\u4E00\u4E0B\u524D\u5411\u540E\u5411\u6307\u9488\u5C31\u53EF\u4EE5\u4E86\u3002\u540C\u65F6\u8FD8\u8981\u6CE8\u610F\u66F4\u65B0\u4E00\u4E0B\u6700\u9AD8\u5C42\u6570<code>maxLevel</code>\u3002</p><h2 id="\u66F4\u65B0\u8FC7\u7A0B" tabindex="-1">\u66F4\u65B0\u8FC7\u7A0B <a class="header-anchor" href="#\u66F4\u65B0\u8FC7\u7A0B" aria-hidden="true">#</a></h2><p>\u5F53\u6211\u4EEC\u8C03\u7528 zadd \u65B9\u6CD5\u65F6\uFF0C\u5982\u679C\u5BF9\u5E94\u7684 value \u4E0D\u5B58\u5728\uFF0C\u90A3\u5C31\u662F\u63D2\u5165\u8FC7\u7A0B\u3002\u5982\u679C\u8FD9\u4E2A value \u5DF2\u7ECF\u5B58\u5728\u4E86\uFF0C\u53EA\u662F\u8C03\u6574\u4E00\u4E0B score \u7684\u503C\uFF0C\u90A3\u5C31\u9700\u8981\u8D70\u4E00\u4E2A\u66F4\u65B0\u7684\u6D41\u7A0B\u3002\u5047\u8BBE\u8FD9\u4E2A\u65B0\u7684 score \u503C\u4E0D\u4F1A\u5E26\u6765\u6392\u5E8F\u4F4D\u7F6E\u4E0A\u7684\u6539\u53D8\uFF0C\u90A3\u4E48\u5C31\u4E0D\u9700\u8981\u8C03\u6574\u4F4D\u7F6E\uFF0C\u76F4\u63A5\u4FEE\u6539\u5143\u7D20\u7684 score \u503C\u5C31\u53EF\u4EE5\u4E86\u3002\u4F46\u662F\u5982\u679C\u6392\u5E8F\u4F4D\u7F6E\u6539\u53D8\u4E86\uFF0C\u90A3\u5C31\u8981\u8C03\u6574\u4F4D\u7F6E\u3002\u90A3\u8BE5\u5982\u4F55\u8C03\u6574\u4F4D\u7F6E\u5462\uFF1F</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">/* Remove and re-insert when score changes. */</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (score != curscore) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        zskiplistNode *node;</span></span>
<span class="line"><span style="color:#A6ACCD;">        serverAssert(zslDelete(zs-&gt;zsl,curscore,ele,&amp;node));</span></span>
<span class="line"><span style="color:#A6ACCD;">        znode = zslInsert(zs-&gt;zsl,score,node-&gt;ele);</span></span>
<span class="line"><span style="color:#A6ACCD;">        /* We reused the node-&gt;ele SDS string, free the node now</span></span>
<span class="line"><span style="color:#A6ACCD;">        * since zslInsert created a new one. */</span></span>
<span class="line"><span style="color:#A6ACCD;">        node-&gt;ele = NULL;</span></span>
<span class="line"><span style="color:#A6ACCD;">        zslFreeNode(node);</span></span>
<span class="line"><span style="color:#A6ACCD;">        /* Note that we did not removed the original element from</span></span>
<span class="line"><span style="color:#A6ACCD;">        * the hash table representing the sorted set, so we just</span></span>
<span class="line"><span style="color:#A6ACCD;">        * update the score. */</span></span>
<span class="line"><span style="color:#A6ACCD;">        dictGetVal(de) = &amp;znode-&gt;score; /* Update score ptr. */</span></span>
<span class="line"><span style="color:#A6ACCD;">        *flags |= ZADD_UPDATED;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    return 1;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u4E00\u4E2A\u7B80\u5355\u7684\u7B56\u7565\u5C31\u662F\u5148\u5220\u9664\u8FD9\u4E2A\u5143\u7D20\uFF0C\u518D\u63D2\u5165\u8FD9\u4E2A\u5143\u7D20\uFF0C\u9700\u8981\u7ECF\u8FC7\u4E24\u6B21\u8DEF\u5F84\u641C\u7D22\u3002Redis \u5C31\u662F\u8FD9\u4E48\u5E72\u7684\u3002 \u4E0D\u8FC7 Redis \u9047\u5230 score \u503C\u6539\u53D8\u4E86\u5C31\u76F4\u63A5\u5220\u9664\u518D\u63D2\u5165\uFF0C\u4E0D\u4F1A\u53BB\u5224\u65AD\u4F4D\u7F6E\u662F\u5426\u9700\u8981\u8C03\u6574\uFF0C\u4ECE\u8FD9\u70B9\u770B\uFF0CRedis \u7684 zadd \u7684\u4EE3\u7801\u4F3C\u4E4E\u8FD8\u6709\u4F18\u5316\u7A7A\u95F4\u3002\u5173\u4E8E\u8FD9\u4E00\u70B9\uFF0C\u8BFB\u8005\u4EEC\u53EF\u4EE5\u7EE7\u7EED\u8BA8\u8BBA\u3002</p><h2 id="\u5982\u679C-score-\u503C\u90FD\u4E00\u6837\u5462\uFF1F" tabindex="-1">\u5982\u679C score \u503C\u90FD\u4E00\u6837\u5462\uFF1F <a class="header-anchor" href="#\u5982\u679C-score-\u503C\u90FD\u4E00\u6837\u5462\uFF1F" aria-hidden="true">#</a></h2><p>\u5728\u4E00\u4E2A\u6781\u7AEF\u7684\u60C5\u51B5\u4E0B\uFF0Czset \u4E2D\u6240\u6709\u7684 score \u503C\u90FD\u662F\u4E00\u6837\u7684\uFF0Czset \u7684\u67E5\u627E\u6027\u80FD\u4F1A\u9000\u5316\u4E3A O(n) \u4E48\uFF1FRedis \u4F5C\u8005\u81EA\u7136\u8003\u8651\u5230\u4E86\u8FD9\u4E00\u70B9\uFF0C\u6240\u4EE5 zset \u7684\u6392\u5E8F\u5143\u7D20\u4E0D\u53EA\u770B score \u503C\uFF0C\u5982\u679C score \u503C\u76F8\u540C\u8FD8\u9700\u8981\u518D\u6BD4\u8F83 value \u503C (\u5B57\u7B26\u4E32\u6BD4\u8F83)\u3002</p><h2 id="\u5143\u7D20\u6392\u540D\u662F\u600E\u4E48\u7B97\u51FA\u6765\u7684\uFF1F" tabindex="-1">\u5143\u7D20\u6392\u540D\u662F\u600E\u4E48\u7B97\u51FA\u6765\u7684\uFF1F <a class="header-anchor" href="#\u5143\u7D20\u6392\u540D\u662F\u600E\u4E48\u7B97\u51FA\u6765\u7684\uFF1F" aria-hidden="true">#</a></h2><p>\u524D\u9762\u6211\u4EEC\u5570\u55E6\u4E86\u4E00\u5806\uFF0C\u4F46\u662F\u6709\u4E00\u4E2A\u91CD\u8981\u7684\u5C5E\u6027\u6CA1\u6709\u63D0\u5230\uFF0C\u90A3\u5C31\u662F zset \u53EF\u4EE5\u83B7\u53D6\u5143\u7D20\u7684\u6392\u540D rank\u3002\u90A3\u8FD9\u4E2A rank \u662F\u5982\u4F55\u7B97\u51FA\u6765\u7684\uFF1F\u5982\u679C\u4EC5\u4EC5\u4F7F\u7528\u4E0A\u9762\u7684\u7ED3\u6784\uFF0Crank \u662F\u4E0D\u80FD\u7B97\u51FA\u6765\u7684\u3002Redis \u5728 skiplist \u7684 forward \u6307\u9488\u4E0A\u8FDB\u884C\u4E86\u4F18\u5316\uFF0C\u7ED9\u6BCF\u4E00\u4E2A forward \u6307\u9488\u90FD\u589E\u52A0\u4E86 span \u5C5E\u6027\uFF0Cspan \u662F\u300C\u8DE8\u5EA6\u300D\u7684\u610F\u601D\uFF0C\u8868\u793A\u4ECE\u5F53\u524D\u5C42\u7684\u5F53\u524D\u8282\u70B9\u6CBF\u7740 forward \u6307\u9488\u8DF3\u5230\u4E0B\u4E00\u4E2A\u8282\u70B9\u4E2D\u95F4\u8DF3\u8FC7\u591A\u5C11\u4E2A\u8282\u70B9\u3002Redis \u5728\u63D2\u5165\u5220\u9664\u64CD\u4F5C\u65F6\u4F1A\u5C0F\u5FC3\u7FFC\u7FFC\u5730\u66F4\u65B0 span \u503C\u7684\u5927\u5C0F\u3002</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">struct zslforward {</span></span>
<span class="line"><span style="color:#A6ACCD;">  zslnode* item;</span></span>
<span class="line"><span style="color:#A6ACCD;">  long span;  // \u8DE8\u5EA6</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct zslnode {</span></span>
<span class="line"><span style="color:#A6ACCD;">  String value;</span></span>
<span class="line"><span style="color:#A6ACCD;">  double score;</span></span>
<span class="line"><span style="color:#A6ACCD;">  zslforward*[] forwards;  // \u591A\u5C42\u8FDE\u63A5\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">  zslnode* backward;  // \u56DE\u6EAF\u6307\u9488</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u8FD9\u6837\u5F53\u6211\u4EEC\u8981\u8BA1\u7B97\u4E00\u4E2A\u5143\u7D20\u7684\u6392\u540D\u65F6\uFF0C\u53EA\u9700\u8981\u5C06\u300C\u641C\u7D22\u8DEF\u5F84\u300D\u4E0A\u7684\u7ECF\u8FC7\u7684\u6240\u6709\u8282\u70B9\u7684\u8DE8\u5EA6 span \u503C\u8FDB\u884C\u53E0\u52A0\u5C31\u53EF\u4EE5\u7B97\u51FA\u5143\u7D20\u7684\u6700\u7EC8 rank \u503C\u3002</p><h2 id="\u601D\u8003" tabindex="-1">\u601D\u8003 <a class="header-anchor" href="#\u601D\u8003" aria-hidden="true">#</a></h2><p>\u6587\u4E2D\u6211\u4EEC\u63D0\u5230\u5F53 score \u503C\u7684\u53D8\u5316\u5FAE\u5C0F\uFF0C\u4E0D\u4F1A\u5E26\u6765\u4F4D\u7F6E\u4E0A\u7684\u8C03\u6574\u65F6\uFF0C\u662F\u4E0D\u662F\u53EF\u4EE5\u76F4\u63A5\u4FEE\u6539 score \u540E\u5C31\u8FD4\u56DE\uFF1F</p><p>\u8BF7\u8BFB\u8005\u4EEC\u5BF9\u8FD9\u4E2A\u95EE\u9898\u8FDB\u884C\u8BA8\u8BBA\u3002\u5982\u679C\u786E\u5B9E\u5982\u6B64\uFF0C\u53EF\u4EE5\u8003\u8651\u5411 Redis \u4F5C\u8005 Antirez \u63D0 issue \u4E86\u3002</p><h2 id="\u540E\u8BB0" tabindex="-1">\u540E\u8BB0 <a class="header-anchor" href="#\u540E\u8BB0" aria-hidden="true">#</a></h2><p>\u8001\u94B1\u4E8E 2018 \u5E74 7 \u6708 28 \u65E5\u5411 Redis \u7684 Github Repo \u63D0\u4EA4\u4E86\u8FD9\u4E2A\u5C0F\u4F18\u5316\u7684\u5EFA\u8BAE <a href="https://github.com/antirez/redis/issues/5179" target="_blank" rel="noreferrer">\u300Amaybe an optimizable point for zadd operation\u300B</a>\uFF0C5 \u5929\u540E\uFF0CRedis \u4F5C\u8005 Antirez \u63A5\u53D7\u4E86\u8FD9\u4E2A\u5EFA\u8BAE\uFF0C\u5BF9 skiplist \u7684\u4EE3\u7801\u505A\u4E86\u5C0F\u4FEE\u6539\u5E76 merge \u5230\u4E86 master\u3002</p><p>Antirez \u5411\u8001\u94B1\u8868\u8FBE\u4E86\u611F\u8C22\uFF0C\u4F5C\u4E3A\u5C0F\u5B66\u751F\u7684\u6211\u8868\u793A\u5F88\u6FC0\u52A8\uFF0C\u4ED6\u544A\u8BC9\u6211\u8FD9\u4E2A\u5C0F\u4F18\u5316\u5728\u67D0\u4E9B\u5E94\u7528\u573A\u666F\u4E0B\u53EF\u4EE5\u4E3A zset \u5E26\u6765 10% \u4EE5\u4E0A\u6027\u80FD\u7684\u63D0\u5347\u3002</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/5/1650a1dac220f24b~tplv-t2oaga2asx-image.image" alt=""></p>`,44),o=[p];function t(r,c,i,A,d,C){return a(),n("div",null,o)}const D=s(l,[["render",t]]);export{y as __pageData,D as default};
